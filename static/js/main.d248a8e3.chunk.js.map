{"version":3,"sources":["js/clock.js","App.js","serviceWorker.js","index.js"],"names":["lastSync","syncTimeout","expiryTime","hasLoaded","WORLDSTATE_URL","encodeURIComponent","pad","n","toString","length","getTimeFromWorldstate","moment","now","valueOf","axios","get","headers","Access-Control-Allow-Origin","then","response","expiryTimeMS","data","find","element","parseInt","getExpiryTime","getTimeUntilNextEvent","timeUntilDay","getNextNightTimes","Array","from","x","i","map","calendar","getFormattedTime","ms","total_s","total_m","Math","floor","msToHMS","updateLocale","longDateFormat","LT","LTS","L","l","LL","ll","LLL","lll","LLLL","llll","Clock","props","react_default","a","createElement","className","time","NextNights","nights","index","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","clearInterval","interval","_this2","setInterval","tick","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d248a8e3.chunk.js","sourcesContent":["import moment from 'moment';\nimport axios from 'axios';\n\nvar lastSync = 0;\nvar syncTimeout = 60000;\nvar expiryTime = 0;\n\nvar hasLoaded = false;\n\nconst WORLDSTATE_URL = 'http://content.warframe.com/dynamic/worldState.php';\nconst CORS_URL = 'https://api.allorigins.ml/get?callback=?&url=' + encodeURIComponent(WORLDSTATE_URL);\n\nmoment.updateLocale('en', {\n    longDateFormat: {\n        LT: 'HH:mm A',\n        LTS: 'HH:mm:ss A',\n        L: 'MM/DD/YYYY',\n        l: 'M/D/YYYY',\n        LL: 'MMMM Do YYYY',\n        ll: 'MMM D YYYY',\n        LLL: 'MMMM Do YYYY LT',\n        lll: 'MMM D YYYY LT',\n        LLLL: 'dddd, MMMM Do YYYY LT',\n        llll: 'ddd, MMM D YYYY LT'\n    }\n});\n\nfunction pad(n) {\n    if (n.toString().length == 1)\n        return '0' + n.toString();\n    return n;\n}\n\nfunction getTimeFromWorldstate() {\n    lastSync = moment.now().valueOf();\n    axios.get(WORLDSTATE_URL, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n        },\n    })\n        .then(response => {\n            var expiryTimeMS = response.data['SyndicateMissions'].find(\n                element => (element['Tag'] === 'CetusSyndicate')\n            )['Expiry']['$date']['$numberLong'];\n            expiryTime = parseInt(expiryTimeMS);\n            hasLoaded = true;\n        });\n}\n\n// Get the 'cetus syndicate mission expiry time' from Warframe's servers,\n//  or from a cached version\nfunction getExpiryTime() {\n    if (moment.now() >= expiryTime) {\n        expiryTime += 150 * 60 * 1000;\n        getTimeFromWorldstate();\n    } else if (moment.now().valueOf() - lastSync >= syncTimeout) {\n        // Resync from server\n        lastSync = moment.now().valueOf()\n        getTimeFromWorldstate();\n    }\n    return expiryTime;\n}\n\n// Get the time until the next dawn\nfunction getTimeUntilDay() {\n    return getExpiryTime() - moment.now().valueOf();\n}\n\n// Get the time until the next dawn or dusk\nfunction getTimeUntilNextEvent() {\n    var timeUntilDay = getTimeUntilDay();\n    if (timeUntilDay > (50 * 60 * 1000))\n        return timeUntilDay - (50 * 60 * 1000);\n\n    return timeUntilDay;\n}\n\n// Convert a time to HH:MM:SS format for display\nfunction msToHMS(ms) {\n    var total_s = ms / 1000;\n    var total_m = total_s / 60;\n    var h = pad(Math.floor(total_m / 60));\n    var m = pad(Math.floor(total_m % 60));\n    var s = pad(Math.floor(total_s % 60));\n    return h + ':' + m + ':' + s;\n}\n\nfunction getNthNight(n) {\n    return getExpiryTime() - (50 * 60 * 1000) + (150 * 60 * 1000) * n;\n}\n\n// Return a list of the next n night times\nfunction getNextNightTimes(n) {\n    return Array.from({ length: n }, (x, i) => i)\n        .map(x => moment(getNthNight(x)).calendar());\n}\n\nfunction getFormattedTime() {\n    if (!hasLoaded) {\n        getTimeUntilNextEvent();\n        return '--:--:--';\n    }\n    return msToHMS(getTimeUntilNextEvent());\n}\n\nexport { getFormattedTime, getNextNightTimes };","import React from 'react';\nimport { getFormattedTime, getNextNightTimes } from './js/clock.js';\nimport { clearInterval } from 'timers';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            time: getFormattedTime(),\n            nights: getNextNightTimes(10)\n        };\n    }\n\n    tick() {\n        this.setState({\n            time: getFormattedTime(),\n            nights: getNextNightTimes(10)\n        });\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(\n            () => this.tick(),\n            500\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <Clock time={this.state.time} />\n                <NextNights nights={this.state.nights} />\n            </div>\n        );\n    }\n}\n\nfunction Clock(props) {\n    return (\n        <div className='clock'>\n            {props.time}\n        </div>\n    );\n}\n\nfunction NextNights(props) {\n    return (\n        <div className='nights-container'>\n            <div className='nights-header'>\n                Upcoming Nights\n            </div>\n            <div className='nights'>\n                {\n                    props.nights.map(\n                        (time, index) => (\n                            <div key={index} className='night-time'>{time}</div>\n                        )\n                    )\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}