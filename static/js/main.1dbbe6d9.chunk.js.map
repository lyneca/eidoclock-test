{"version":3,"sources":["js/clock.js","App.js","index.js"],"names":["lastSync","syncTimeout","expiryTime","hasLoaded","CORS_URL","pad","n","toString","length","getTimeFromWorldstate","moment","now","valueOf","request","get","json","err","res","body","expiryTimeMS","find","element","parseInt","getExpiryTime","getTimeUntilNextEvent","timeUntilDay","getNextNightTimes","Array","from","x","i","map","calendar","getFormattedTime","ms","total_s","total_m","Math","floor","msToHMS","axios","defaults","withCredentials","updateLocale","longDateFormat","LT","LTS","L","l","LL","ll","LLL","lll","LLLL","llll","Clock","props","react_default","a","createElement","className","time","NextNights","nights","index","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","clearInterval","interval","_this2","setInterval","tick","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"mZAIIA,EAAW,EACXC,EAAc,IACdC,EAAa,EAEbC,GAAY,EAGVC,EAAW,yFAmBjB,SAASC,EAAIC,GACT,OAA2B,GAAvBA,EAAEC,WAAWC,OACN,IAAMF,EAAEC,WACZD,EAGX,SAASG,IACLT,EAAWU,IAAOC,MAAMC,UACxBC,IAAQC,IAAIV,EAAU,CAACW,MAAM,GAAO,SAAUC,EAAKC,EAAKC,GACpD,IACIC,EADOD,EACY,kBAAsBE,KACzC,SAAAC,GAAO,MAAwB,mBAAnBA,EAAO,MADJ,yBAGnBnB,EAAaoB,SAASH,GACtBhB,GAAY,IAMpB,SAASoB,IASL,OARIb,IAAOC,OAAST,GAChBA,GAAc,IACdO,KACOC,IAAOC,MAAMC,UAAYZ,GAAYC,IAE5CD,EAAWU,IAAOC,MAAMC,UACxBH,KAEGP,EASX,SAASsB,IACL,IAAIC,EALGF,IAAkBb,IAAOC,MAAMC,UAMtC,OAAIa,EAAgB,IACTA,EAAgB,IAEpBA,EAkBX,SAASC,EAAkBpB,GACvB,OAAOqB,MAAMC,KAAK,CAAEpB,OAAQF,GAAK,SAACuB,EAAGC,GAAJ,OAAUA,IACtCC,IAAI,SAAAF,GAAC,OAAInB,KAPGJ,EAOgBuB,EAN1BN,IAAmB,IAAmB,IAAmBjB,IAM3B0B,WAPzC,IAAqB1B,IAUrB,SAAS2B,IACL,OAAK9B,EApBT,SAAiB+B,GACb,IAAIC,EAAUD,EAAK,IACfE,EAAUD,EAAU,GAIxB,OAHQ9B,EAAIgC,KAAKC,MAAMF,EAAU,KAGtB,IAFH/B,EAAIgC,KAAKC,MAAMF,EAAU,KAEZ,IADb/B,EAAIgC,KAAKC,MAAMH,EAAU,KAmB1BI,CAAQf,MAHXA,IACO,YAtFfgB,IAAMC,SAASC,iBAAkB,EAEjChC,IAAOiC,aAAa,KAAM,CACtBC,eAAgB,CACZC,GAAI,UACJC,IAAK,aACLC,EAAG,aACHC,EAAG,WACHC,GAAI,eACJC,GAAI,aACJC,IAAK,kBACLC,IAAK,gBACLC,KAAM,wBACNC,KAAM,oCCgBd,SAASC,EAAMC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVJ,EAAMK,MAKnB,SAASC,EAAWN,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,mBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEPJ,EAAMO,OAAOhC,IACT,SAAC8B,EAAMG,GAAP,OACIP,EAAAC,EAAAC,cAAA,OAAKM,IAAKD,EAAOJ,UAAU,cAAcC,OAStDK,kBA/DX,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KACDkB,MAAQ,CACTb,KAAM5B,IACN8B,OAAQrC,EAAkB,KAJfyC,sEASfG,KAAKK,SAAS,CACVd,KAAM5B,IACN8B,OAAQrC,EAAkB,qDAK9BkD,wBAAcN,KAAKO,sDAGH,IAAAC,EAAAR,KAChBA,KAAKO,SAAWE,YACZ,kBAAMD,EAAKE,QACX,sCAKJ,OACIvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACJ,EAAD,CAAOM,KAAMS,KAAKI,MAAMb,OACxBJ,EAAAC,EAAAC,cAACG,EAAD,CAAYC,OAAQO,KAAKI,MAAMX,iBAhC7BkB,IAAMC,WCExBC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1dbbe6d9.chunk.js","sourcesContent":["import moment from 'moment';\nimport axios from 'axios';\nimport request from 'request';\n\nvar lastSync = 0;\nvar syncTimeout = 60000;\nvar expiryTime = 0;\n\nvar hasLoaded = false;\n\nconst WORLDSTATE_URL = 'http://content.warframe.com/dynamic/worldState.php';\nconst CORS_URL = 'https://cors-anywhere.herokuapp.com/' + WORLDSTATE_URL;\n\naxios.defaults.withCredentials = true;\n\nmoment.updateLocale('en', {\n    longDateFormat: {\n        LT: 'HH:mm A',\n        LTS: 'HH:mm:ss A',\n        L: 'MM/DD/YYYY',\n        l: 'M/D/YYYY',\n        LL: 'MMMM Do YYYY',\n        ll: 'MMM D YYYY',\n        LLL: 'MMMM Do YYYY LT',\n        lll: 'MMM D YYYY LT',\n        LLLL: 'dddd, MMMM Do YYYY LT',\n        llll: 'ddd, MMM D YYYY LT'\n    }\n});\n\nfunction pad(n) {\n    if (n.toString().length == 1)\n        return '0' + n.toString();\n    return n;\n}\n\nfunction getTimeFromWorldstate() {\n    lastSync = moment.now().valueOf();\n    request.get(CORS_URL, {json: true}, function (err, res, body) {\n        var data = body;\n        var expiryTimeMS = data['SyndicateMissions'].find(\n            element => (element['Tag'] === 'CetusSyndicate')\n        )['Expiry']['$date']['$numberLong'];\n        expiryTime = parseInt(expiryTimeMS);\n        hasLoaded = true;\n    });\n}\n\n// Get the 'cetus syndicate mission expiry time' from Warframe's servers,\n//  or from a cached version\nfunction getExpiryTime() {\n    if (moment.now() >= expiryTime) {\n        expiryTime += 150 * 60 * 1000;\n        getTimeFromWorldstate();\n    } else if (moment.now().valueOf() - lastSync >= syncTimeout) {\n        // Resync from server\n        lastSync = moment.now().valueOf();\n        getTimeFromWorldstate();\n    }\n    return expiryTime;\n}\n\n// Get the time until the next dawn\nfunction getTimeUntilDay() {\n    return getExpiryTime() - moment.now().valueOf();\n}\n\n// Get the time until the next dawn or dusk\nfunction getTimeUntilNextEvent() {\n    var timeUntilDay = getTimeUntilDay();\n    if (timeUntilDay > (50 * 60 * 1000))\n        return timeUntilDay - (50 * 60 * 1000);\n\n    return timeUntilDay;\n}\n\n// Convert a time to HH:MM:SS format for display\nfunction msToHMS(ms) {\n    var total_s = ms / 1000;\n    var total_m = total_s / 60;\n    var h = pad(Math.floor(total_m / 60));\n    var m = pad(Math.floor(total_m % 60));\n    var s = pad(Math.floor(total_s % 60));\n    return h + ':' + m + ':' + s;\n}\n\nfunction getNthNight(n) {\n    return getExpiryTime() - (50 * 60 * 1000) + (150 * 60 * 1000) * n;\n}\n\n// Return a list of the next n night times\nfunction getNextNightTimes(n) {\n    return Array.from({ length: n }, (x, i) => i)\n        .map(x => moment(getNthNight(x)).calendar());\n}\n\nfunction getFormattedTime() {\n    if (!hasLoaded) {\n        getTimeUntilNextEvent();\n        return '--:--:--';\n    }\n    return msToHMS(getTimeUntilNextEvent());\n}\n\nexport { getFormattedTime, getNextNightTimes };","import React from 'react';\nimport { getFormattedTime, getNextNightTimes } from './js/clock.js';\nimport { clearInterval } from 'timers';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            time: getFormattedTime(),\n            nights: getNextNightTimes(10)\n        };\n    }\n\n    tick() {\n        this.setState({\n            time: getFormattedTime(),\n            nights: getNextNightTimes(10)\n        });\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(\n            () => this.tick(),\n            500\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <Clock time={this.state.time} />\n                <NextNights nights={this.state.nights} />\n            </div>\n        );\n    }\n}\n\nfunction Clock(props) {\n    return (\n        <div className='clock'>\n            {props.time}\n        </div>\n    );\n}\n\nfunction NextNights(props) {\n    return (\n        <div className='nights-container'>\n            <div className='nights-header'>\n                Upcoming Nights\n            </div>\n            <div className='nights'>\n                {\n                    props.nights.map(\n                        (time, index) => (\n                            <div key={index} className='night-time'>{time}</div>\n                        )\n                    )\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}